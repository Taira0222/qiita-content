name: Publish Article to Qiita

on:
  schedule:
    - cron: '10 6 5 2 *'  # 毎年2月5日 UTC 06:10 に実行（Boise MST 23:10 に相当、例として2025/02/04 23:10 に実行）
  workflow_dispatch:      # 手動実行も可能

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # ① qiita-content リポジトリ（メインリポジトリ）をチェックアウト
      - name: Checkout qiita-content repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}   # push 権限が必要な場合は PAT を利用
          path: qiita-content

      # ② refuge_qiita リポジトリをチェックアウト（private リポジトリの場合、PAT を利用）
      - name: Checkout refuge_qiita repository
        uses: actions/checkout@v3
        with:
          repository: Taira0222/refuge_qiita
          token: ${{ secrets.MY_PAT }}
          ref: main
          path: refuge_qiita

      # ③ Ruby のセットアップ（必要な Ruby バージョンに合わせて変更）
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'

      # ④ Node.js のセットアップ（qiita-cli 実行用）
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # ⑤ Git のユーザー情報を設定（コミット用）
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # ⑥ 投稿処理スクリプトの実行
      - name: Run Publish Article Script
        run: |
          ruby <<'EOF'
          #!/usr/bin/env ruby
          require 'time'
          require 'fileutils'
          
          # テスト用に対象期間を 2025/02/04 のみに設定
          boise_time = Time.now.getutc - (7 * 3600)
          start_date = Time.parse("2025-02-04 00:00:00")
          end_date   = Time.parse("2025-02-04 23:59:59")
          unless boise_time >= start_date && boise_time <= end_date
            puts "現在の Boise 時刻 (#{boise_time}) は実行期間外です。終了します。"
            exit 0
          end
          
          # ワークスペース上では、qiita-content リポジトリのルートが Dir.pwd/qiita-content
          qiita_github_dir = File.join(Dir.pwd, 'qiita-content')
          public_dir       = File.join(qiita_github_dir, 'public')
          # refuge_qiita リポジトリのルート
          refuge_dir       = File.join(Dir.pwd, 'refuge_qiita')
          
          # --- Step 1: refuge_qiita から数字が一番若い stock ファイルを選び、qiita-content/public へ移動 ---
          stock_files = Dir.entries(refuge_dir).select { |f| f =~ /^stock(\d+)\.md$/ }
          if stock_files.empty?
            puts "refuge_qiita 内に対象ファイルが見つかりません。"
            exit 1
          end
          smallest_file = stock_files.sort_by { |f| f.match(/^stock(\d+)\.md$/)[1].to_i }.first
          puts "Moving file: #{smallest_file}"
          source_path = File.join(refuge_dir, smallest_file)
          dest_path   = File.join(public_dir, smallest_file)
          FileUtils.mv(source_path, dest_path)
          
          # --- Step 2: refuge_qiita 側で、stock ファイルの削除内容をコミット＆push ---
          Dir.chdir(refuge_dir) do
            puts "Committing deletion of #{smallest_file} in refuge_qiita"
            system("git add -A")
            commit_msg = "Remove #{smallest_file} after moving to qiita-content/public"
            system("git commit -m \"#{commit_msg}\"")
            system("git push")
          end
          
          # --- Step 3: qiita-content/public 内の article ファイルから最大番号を取得し、+1 した名前にリネーム ---
          article_files = Dir.entries(public_dir).select { |f| f =~ /^article(\d+)\.md$/ }
          if article_files.empty?
            puts "qiita-content/public 内に article ファイルが見つかりません。"
            exit 1
          end
          max_article_num = article_files.map { |f| f.match(/^article(\d+)\.md$/)[1].to_i }.max
          new_article_num = max_article_num + 1
          new_file_name   = "article#{new_article_num}.md"
          new_file_path   = File.join(public_dir, new_file_name)
          puts "Renaming moved file to: #{new_file_name}"
          FileUtils.mv(dest_path, new_file_path)
          
          # --- Step 4: qiita-content リポジトリ内で、Qiita 公開コマンドと Git コマンドを実行 ---
          Dir.chdir(qiita_github_dir) do
            publish_cmd = "npx qiita publish article#{new_article_num}"
            puts "Running command: #{publish_cmd}"
            system(publish_cmd)
            
            puts "Running command: git add -A"
            system("git add -A")
            
            commit_msg = "Add article#{new_article_num}"
            commit_cmd = "git commit -m \"#{commit_msg}\""
            puts "Running command: #{commit_cmd}"
            system(commit_cmd)
            
            puts "Running command: git push"
            system("git push")
          end
          EOF
        shell: bash
