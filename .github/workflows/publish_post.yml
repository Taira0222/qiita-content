name: Publish Article and Post to X

on:
  schedule:
    - cron: '10 8 5 2 *'  # 毎年2月5日 UTC 08:10 に実行（Boise MST 01:10 に相当）
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      QIITA_TOKEN: ${{ secrets.QIITA_TOKEN }}
    steps:
      - name: Checkout qiita-content repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.MY_PAT }}
          path: qiita-content

      - name: Checkout refuge_qiita repository
        uses: actions/checkout@v3
        with:
          repository: Taira0222/refuge_qiita
          token: ${{ secrets.MY_PAT }}
          ref: main
          path: refuge_qiita

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'

      - name: Install qiita-cli
        run: npm install -g @qiita/qiita-cli@latest
        shell: bash

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run Publish Article Script
        env:
          QIITA_TOKEN: ${{ secrets.QIITA_TOKEN }}
        run: |
          ruby <<'EOF'
          #!/usr/bin/env ruby
          require 'time'
          require 'fileutils'
          
          # ※テスト用：対象期間を2025/02/05 のみに設定
          boise_time = Time.now.getutc - (7 * 3600)
          start_date = Time.parse("2025-02-05 00:00:00")
          end_date   = Time.parse("2025-02-05 23:59:59")
          unless boise_time >= start_date && boise_time <= end_date
            puts "現在の Boise 時刻 (#{boise_time}) は実行期間外です。終了します。"
            exit 0
          end
          
          qiita_github_dir = File.join(Dir.pwd, 'qiita-content')
          public_dir       = File.join(qiita_github_dir, 'public')
          refuge_dir       = File.join(Dir.pwd, 'refuge_qiita')
          
          # Step 1: refuge_qiita 内の最小番号の stock*.md ファイルを選択する
          stock_files = Dir.entries(refuge_dir).select { |f| f =~ /^stock(\d+)\.md$/ }
          if stock_files.empty?
            puts "refuge_qiita 内に対象ファイルが見つかりません。"
            exit 1
          end
          smallest_file = stock_files.sort_by { |f| f.match(/^stock(\d+)\.md$/)[1].to_i }.first
          puts "Moving file: #{smallest_file}"
          source_path = File.join(refuge_dir, smallest_file)
          dest_path   = File.join(public_dir, smallest_file)
          FileUtils.mv(source_path, dest_path)
          
          # Step 5: refuge_qiita 側で、stock ファイルの削除内容をコミット＆push
          Dir.chdir(refuge_dir) do
            puts "Committing deletion of #{smallest_file} in refuge_qiita"
            system("git add -A")
            commit_msg = "Remove #{smallest_file} after moving to qiita-content/public"
            system("git commit -m \"#{commit_msg}\"")
            system("git push")
          end
          
          # Step 2: qiita-content/public 内の article*.md ファイルから最大番号を取得し、新しい記事番号を決定する
          article_files = Dir.entries(public_dir).select { |f| f =~ /^article(\d+)\.md$/ }
          if article_files.empty?
            puts "qiita-content/public 内に article ファイルが見つかりません。"
            exit 1
          end
          max_article_num = article_files.map { |f| f.match(/^article(\d+)\.md$/)[1].to_i }.max
          new_article_num = max_article_num + 1
          new_file_name   = "article#{new_article_num}.md"
          new_file_path   = File.join(public_dir, new_file_name)
          puts "Renaming moved file to: #{new_file_name}"
          FileUtils.mv(dest_path, new_file_path)
          
          # Step 3: 新しい記事ファイルからタイトルを抽出し、published_title.txt に保存
          begin
            article_content = File.read(new_file_path)
            title_line = article_content.lines.find { |line| line.strip.start_with?("title:") }
            title = title_line ? title_line.sub(/^title:\s*/, "").strip : ""
            puts "Extracted title: #{title}"
            File.write(File.join(qiita_github_dir, "published_title.txt"), title)
          rescue => e
            puts "Error extracting title: #{e}"
            title = ""
          end
          
          # Step 4: Qiita CLI を使用して記事を投稿する
          Dir.chdir(qiita_github_dir) do
            publish_cmd = "npx qiita publish article#{new_article_num}"
            puts "Running command: #{publish_cmd}"
            cli_output = `#{publish_cmd}`.strip
            puts "CLI output: #{cli_output}"

            # 例: "Posted: article131 -> b1d868005ebc79600fc7"
            article_id = cli_output.split("->").last.strip
            published_url = "https://qiita.com/Taira0222/items/#{article_id}"
            
            # 万が一複数行出力される場合、最初の行のみを使用する
            clean_url = published_url.split("\n").first.strip
            puts "Published URL: #{clean_url}"
            File.write("published_url.txt", clean_url)
            
            # GitとGitHubに変更を反映させている
            puts "Running command: git add -A"
            system("git add -A")
            commit_msg = "Add article#{new_article_num}"
            commit_cmd = "git commit -m \"#{commit_msg}\""
            puts "Running command: #{commit_cmd}"
            system(commit_cmd)
            puts "Running command: git push"
            system("git push")
          end
          EOF
        shell: bash

      - name: Upload Published URL Artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-url
          path: qiita-content/published_url.txt

      - name: Upload Published Title Artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-title
          path: qiita-content/published_title.txt

  post_to_x:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Download Published URL Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-url
          path: published

      - name: Download Published Title Artifact
        uses: actions/download-artifact@v4
        with:
          name: published-title
          path: published_title

      - name: Read Published URL
        id: read_url
        run: |
          published_url=$(cat published/published_url.txt)
          echo "Published URL is: $published_url"
          echo "published_url=$published_url" >> $GITHUB_OUTPUT

      - name: Read Published Title
        id: read_title
        run: |
          title=$(head -n 1 published_title/published_title.txt)
          echo "Extracted title: $title"
          echo "title<<EOF" >> "$GITHUB_OUTPUT"
          echo "$title" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"        

      - name: Set up Ruby for X API posting
        uses: ruby/setup-ruby@v1
        with:
            ruby-version: '3.3.5'
        
      - name: Install x-ruby gem
        run: gem install x
        
      - name: Post tweet using x-ruby
        env:
            TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
            TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
            TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}
            TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
            TWEET_TITLE: ${{ steps.read_title.outputs.title }}
            TWEET_URL: ${{ steps.read_url.outputs.published_url }}
        run: |
            ruby << 'EOF'
            require 'x'
            
            client = X::Client.new do |config|
              config.consumer_key        = ENV['TWITTER_CONSUMER_KEY']
              config.consumer_secret     = ENV['TWITTER_CONSUMER_SECRET']
              config.access_token        = ENV['TWITTER_ACCESS_TOKEN_KEY']
              config.access_token_secret = ENV['TWITTER_ACCESS_TOKEN_SECRET']
            end
            
            # ツイート文の組み立て
            tweet_text = "#{ENV['TWEET_TITLE']}\n#{ENV['TWEET_URL']}\n#Qiita\n#未経験エンジニア\n#駆け出しエンジニア"
            
            response = client.update(tweet_text)
            puts "Tweet posted successfully!"
            puts "Tweet URL: https://twitter.com/#{response.user.screen_name}/status/#{response.id}"
            EOF
        