name: Daily Qiita Post

on:
  schedule:
    - cron: '0 5 * * *'  # 毎日 UTC 05:00 に実行（Boise MST 22:00に相当）
  workflow_dispatch:      # 手動実行も可能

jobs:
  post:
    runs-on: ubuntu-latest

    steps:
      # ① qiita-content リポジトリ（メインリポジトリ）をチェックアウト
      - name: Checkout qiita-content repository
        uses: actions/checkout@v3
        with:
          path: qiita-content

      # ② refuge_qiita リポジトリをチェックアウト（private リポジトリでも GITHUB_TOKEN で認証可能）
      - name: Checkout refuge_qiita repository
        uses: actions/checkout@v3
        with:
            repository: Taira0222/refuge_qiita
            token: ${{ secrets.GITHUB_TOKEN }}
            ref: master
            path: refuge_qiita


      # ③ Ruby のセットアップ（必要な Ruby バージョンに合わせて変更）
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'

      # ※ Gemfile が不要の場合は bundle install のステップは削除しても問題ありません

      # ⑤ 投稿処理スクリプトの実行（リモート環境上でのファイル操作を反映）
      - name: Run Publish Article Script
        run: |
          ruby <<'EOF'
          #!/usr/bin/env ruby
          require 'time'
          require 'fileutils'
          
          # まず、現在の時刻を Boise 時間（MST、UTC-7）に合わせて取得
          boise_time = Time.now.getutc - (7 * 3600)
          start_date = Time.parse("2025-02-08")
          end_date   = Time.parse("2025-03-11")
          unless boise_time >= start_date && boise_time <= end_date
            puts "現在の Boise 時刻 (#{boise_time}) は実行期間外です。終了します。"
            exit 0
          end
          
          # GitHub Actions では、ワークスペースのルートが Dir.pwd となるため、
          # qiita-content リポジトリのルートディレクトリとして扱います。
          qiita_github_dir = File.join(Dir.pwd, 'qiita-content')
          public_dir       = File.join(qiita_github_dir, 'public')
          # refuge_dir は別リポジトリ（refuge_qiita）のルートディレクトリ
          refuge_dir       = File.join(Dir.pwd, 'refuge_qiita')
          
          # --- Step 1: refuge_qiita から数字が一番若い stock ファイルを選択し、qiita-content/public へ移動 ---
          stock_files = Dir.entries(refuge_dir).select { |f| f =~ /^stock(\d+)\.md$/ }
          if stock_files.empty?
            puts "refuge_qiita 内に対象ファイルが見つかりません。"
            exit 1
          end
          smallest_file = stock_files.sort_by { |f| f.match(/^stock(\d+)\.md$/)[1].to_i }.first
          puts "Moving file: #{smallest_file}"
          source_path = File.join(refuge_dir, smallest_file)
